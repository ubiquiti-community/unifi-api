{{- $structName := .StructName }}

{{ define "field" }}
	{{ .FieldName }} {{ if .IsArray }}[]{{end}}{{ .FieldType }} `json:"{{ .JSONName }}{{ if .OmitEmpty }},omitempty{{ end }}"` {{ if .FieldValidation }}// {{ .FieldValidation }}{{ end }} {{- end }}
{{ define "field-customUnmarshalType" }}
	{{- if eq .CustomUnmarshalType "" }}{{else}}
			{{ .FieldName }} {{ if .IsArray }}[]{{end}}{{ .CustomUnmarshalType }} `json:"{{ .JSONName }}"`{{ end }} {{- end }}
{{ define "typecast" }}
	{{- if ne .CustomUnmarshalFunc "" }}
		dst.{{ .FieldName }}= {{ .CustomUnmarshalFunc }}(aux.{{ .FieldName }})
	{{- else if eq .CustomUnmarshalType "" }}{{else}}
		{{- if .IsArray }}
		dst.{{ .FieldName }}= make([]{{ .FieldType }}, len(aux.{{ .FieldName }}))
		for i, v := range aux.{{ .FieldName }} {
				dst.{{ .FieldName }}[i] = {{ .FieldType }}(v)
		}
		{{- else }}
		dst.{{ .FieldName }} = {{ .FieldType }}(aux.{{ .FieldName }})
		{{- end }}{{- end }}{{- end }}
// Code generated from ace.jar fields *.json files
// DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/swaggest/openapi-go"
)

// just to fix compile issues with the import
var (
	_ context.Context
	_ fmt.Formatter
	_ json.Marshaler
)

{{ range $k, $v := .Types }}
type {{ $k }} struct {
	{{ range $fk, $fv := $v.Fields }}{{ if not $fv }}
	{{ else }}{{- template "field" $fv }}{{ end }}{{ end }}
}

func (dst *{{ $k }}) UnmarshalJSON(b []byte) error {
	type Alias {{ $k }}
	aux := &struct {
			{{- range $fk, $fv := $v.Fields }}{{ if not $fv }}
			{{- else }}{{- template "field-customUnmarshalType" $fv }}{{ end }}{{- end }}

		*Alias
	}{
		Alias: (*Alias)(dst),
	}

	err := json.Unmarshal(b, &aux)
	if err != nil {
		return fmt.Errorf("unable to unmarshal alias: %w", err)
	}

		{{- range $fk, $fv := $v.Fields }}{{ if not $fv }}
		{{- else }}{{- template "typecast" $fv }}{{ end }}{{ end }}

	return nil
}
{{ end }}

{{- if not .IsSetting }}
type {{ .StructName }}GetRequest struct {
	ID string `path:"id"`
}

type {{ .StructName }}DeleteRequest struct {
	ID string `path:"id"`
}

type {{ .StructName }}UpdateRequest struct {
	*{{ .StructName }}
	ID string `path:"id",json:"_id,omitempty"`
}
{{- end }}

type {{ .StructName }}Response struct{
	Meta meta          `json:"meta"`
	Data []{{ .StructName }} `json:"data"`
}

func add{{ .StructName }}() {
	// Get
	{{ if .IsSetting }}
	getOp, err := reflector.NewOperationContext(http.MethodGet,  "/get/setting/{{ .ResourcePath }}")
	{{- else }}
	getOp, err := reflector.NewOperationContext(http.MethodGet, "/{{ if eq .StructName "Device" }}stat{{ else }}rest{{ end }}/{{ .ResourcePath }}/{id}")
	getOp.AddReqStructure(new({{ .StructName }}GetRequest))
	{{- end }}
	if err != nil {
		log.Fatal(err)
	}
	getOp.SetID("Get{{ .StructName }}")
	getOp.SetTags("{{ .StructName }}")
	getOp.AddRespStructure(new({{ .StructName }}Response), openapi.WithHTTPStatus(http.StatusOK))
	getOp.AddRespStructure(ErrorResponse, func(cu *openapi.ContentUnit) {
		cu.IsDefault = true
	})
	err = reflector.AddOperation(getOp)
	if err != nil {
		log.Fatal(err)
	}

	// Update
	{{ if .IsSetting }}
	updateOp, err := reflector.NewOperationContext(http.MethodPut, "/set/setting/{{ .ResourcePath }}")
	updateOp.AddReqStructure(new({{ .StructName }}))
	{{- else }}
	updateOp, err := reflector.NewOperationContext(http.MethodPut, "/rest/{{ .ResourcePath }}/{id}")
	updateOp.AddReqStructure(new({{ .StructName }}UpdateRequest))
	{{- end }}
	if err != nil {
		log.Fatal(err)
	}
	updateOp.SetID("Update{{ .StructName }}")
	updateOp.SetTags("{{ .StructName }}")
	
	updateOp.AddRespStructure(new({{ .StructName }}Response), openapi.WithHTTPStatus(http.StatusCreated), func(cu *openapi.ContentUnit) { cu.IsDefault = true })

	for _, status := range []int{ http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError } {
		updateOp.AddRespStructure(ErrorResponse, openapi.WithContentType("application/json"), openapi.WithHTTPStatus(status))
	}

	err = reflector.AddOperation(updateOp)
	if err != nil {
		log.Fatal(err)
	}
	
	{{ if not .IsSetting }}
	// List
	listOp, err := reflector.NewOperationContext(http.MethodGet, "/{{ if eq .StructName "Device" }}stat/{{else if eq .StructName "APGroup" }}{{ else }}rest/{{ end }}{{ .ResourcePath }}")
	if err != nil {
		log.Fatal(err)
	}
	listOp.SetID("List{{ .StructName }}")
	listOp.SetTags("{{ .StructName }}")
	listOp.AddReqStructure(nil)
	
	listOp.AddRespStructure(new({{ .StructName }}Response), openapi.WithHTTPStatus(http.StatusOK), func(cu *openapi.ContentUnit) { cu.IsDefault = true })

	for _, status := range []int{ http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError } {
		listOp.AddRespStructure(ErrorResponse, openapi.WithContentType("application/json"), openapi.WithHTTPStatus(status))
	}

	err = reflector.AddOperation(listOp)
	if err != nil {
		log.Fatal(err)
	}

	// Create
	createOp, err := reflector.NewOperationContext(http.MethodPost, "/rest/{{ .ResourcePath }}")
	if err != nil {
		log.Fatal(err)
	}
	createOp.SetID("Create{{ .StructName }}")
	createOp.SetTags("{{ .StructName }}")
	createOp.AddReqStructure(new({{ .StructName }}))

	getOp.AddRespStructure(new({{ .StructName }}Response), openapi.WithContentType("application/json"), openapi.WithHTTPStatus(http.StatusOK), func(cu *openapi.ContentUnit) { cu.IsDefault = true })

	for _, status := range []int{ http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError } {
		getOp.AddRespStructure(ErrorResponse, openapi.WithContentType("application/json"), openapi.WithHTTPStatus(status))
	}
	
	err = reflector.AddOperation(createOp)
	if err != nil {
		log.Fatal(err)
	}

	// Delete
	deleteOp, err := reflector.NewOperationContext(http.MethodDelete, "/rest/{{ .ResourcePath }}/{id}")
	if err != nil {
		log.Fatal(err)
	}
	deleteOp.SetID("Delete{{ .StructName }}")
	deleteOp.SetTags("{{ .StructName }}")
	deleteOp.AddReqStructure(new({{ .StructName }}DeleteRequest))

	deleteOp.AddRespStructure(new({{ .StructName }}Response), openapi.WithHTTPStatus(http.StatusOK), func(cu *openapi.ContentUnit) { cu.IsDefault = true })

	for _, status := range []int{ http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusConflict, http.StatusTooManyRequests, http.StatusInternalServerError } {
		deleteOp.AddRespStructure(ErrorResponse, openapi.WithContentType("application/json"), openapi.WithHTTPStatus(status))
	}

	err = reflector.AddOperation(deleteOp)
	if err != nil {
		log.Fatal(err)
	}
	{{- end }}
}
